class Eg::OS::Windows::API::App extends Eg::OS::API {
  
  use List;
  use Encode;
  use Eg::Window;
  use Eg::Node;
  use Hash;
  
  use Eg::Layout::Box;
  
  use Eg::OS::Windows::WindowHandle;
  use Eg::OS::Windows::PaintInfo;
  
  static method new : Eg::OS::Windows::API::App($runtime : Eg::Runtime) {
    
    my $self = new Eg::OS::Windows::API::App;
    
    $self->{runtime} = $runtime;
    
    return $self;
  }
  
  method open_main_window : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $left = $options_h->get_or_default_int("left", &CW_USEDEFAULT);
    
    my $top = $options_h->get_or_default_int("top", &CW_USEDEFAULT);
    
    my $width = $options_h->get_or_default_int("width", &CW_USEDEFAULT);
    
    my $height = $options_h->get_or_default_int("height", &CW_USEDEFAULT);
    
    warn dump [$left, $top, $width, $height];
    
    $self->open_main_window_native($left, $top, $width, $height);
  }
  
  native method open_main_window_native : void ($left : int, $top : int, $width : int, $height : int);
  
  native method start_event_loop : void ();
  
  private precompile method paint_nodes : void ($paint_info : object) {
    
    my $runtime = $self->{runtime};
    
    my $window = $runtime->window;
    
    my $document = $window->document;
    
    my $node_root = (Eg::Node)$document;
    my $node_cur = $node_root;
    my $finish = 0;
    while ($node_cur) {
      # [START]Preorder traversal position
      
      if ($node_cur->node_type == Eg::Node->TYPE_ELEMENT_NODE) {
        $self->paint_node($paint_info, $node_cur);
      }
      
      if ($node_cur->first_child) {
        $node_cur = (Eg::Node)$node_cur->first_child;
      }
      else {
        while (1) {
          # [START]Postorder traversal position
          
          if ($node_cur == $node_root) {
            
            $finish = 1;
            
            last;
          }
          
          # Next sibling
          if ($node_cur->next_sibling) {
            $node_cur = $node_cur->next_sibling;
            last;
          }
          # Next is parent
          else {
            $node_cur = $node_cur->parent_node;
          }
        }
        if ($finish) {
          last;
        }
      }
    }
  }
  
  private native method paint_node : void ($paint_info : object, $node : Eg::Node);
  
  private native static method CW_USEDEFAULT : int ();
  
  private method inner_width : int () {
    return $self->{runtime}->api->window->inner_width;
  }
  
  private method document_title : string () {
    return $self->{runtime}->window->document->title;
  }
}
