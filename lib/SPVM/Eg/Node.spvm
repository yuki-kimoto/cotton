# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Eg::Node {
  allow Eg;
  
  use Hash;
  use List;
  use StringBuffer;
  use Eg::Text;
  use Eg::Layout::Box;
  
  enum {
    TYPE_ELEMENT_NODE = 1,
    TYPE_ATTRIBUTE_NODE = 2,
    TYPE_TEXT_NODE = 3,
    TYPE_CDATA_SECTION_NODE = 4,
    TYPE_PROCESSING_INSTRUCTION_NODE = 7,
    TYPE_COMMENT_NODE = 8,
    TYPE_DOCUMENT_NODE = 9,
    TYPE_DOCUMENT_TYPE_NODE = 10,
    TYPE_DOCUMENT_FRAGMENT_NODE = 11,
  }
  
  # Fields
  has node_type : ro int;
  
  has parent_node : ro Eg::Node;
  
  has next_sibling : rw Eg::Node;
  
  has first_child : rw Eg::Node;
  
  has last_child : rw Eg::Node;
  
  has node_value_buffer : ro StringBuffer;
  
  has layout_box : rw Eg::Layout::Box;
  
  # Class Methods
  static method new : Eg::Node ($node_type : int, $child_nodes : Eg::Node[] = undef) {
    
    my $self = new Eg::Node;
    
    $self->init($node_type, $child_nodes);
    
    return $self;
  }
  
  private static method copy_object_with_proto : object[] ($array : object[], $proto : object[], $cloner : Cloner = undef, $offset : int = 0, $length : int = -1) {
    
    unless ($array) {
      die "\$array must be defined.";
    }
    
    unless ($offset >= 0) {
      die "\$offset must be greater than or equal to 0.";
    }
    
    my $array_length = @$array;
    if ($length < 0) {
      $length = $array_length - $offset;
    }
    
    unless ($offset + $length <= $array_length) {
      die "\$offset + \$length must be less than or equal to the length of \$array.";
    }
    
    unless ($proto) {
      $proto = $array;
    }
    
    my $new_array = Array->new_proto($proto, $length);
    
    if ($cloner) {
      for (my $i = 0; $i < $length; $i++) {
        $new_array->[$i] = $cloner->($array->[$offset + $i]);
      }
    }
    else {
      Array->memcpy_object_address($new_array, 0, $array, $offset, $length);
    }
    
    return $new_array;
  }
  
  private static method copy_object_address_with_proto : object[] ($array : object[], $proto : object[], $offset : int = 0, $length : int = -1) {
    return &copy_object_with_proto($array, $proto, undef, $offset, $length);
  }
  
  # Instance Methods
  protected method init : void ($node_type : int, $child_nodes : Eg::Node[] = undef) {
    
    $self->{node_type} = $node_type;
    
    if ($child_nodes) {
      unless ($child_nodes is_type Eg::Node[]) {
        $child_nodes = (Eg::Node[])&copy_object_address_with_proto($child_nodes, new Eg::Node[0]);
      }
    }
    else {
      $child_nodes = new Eg::Node[0];
    }
    
    # Tree
    if ($child_nodes) {
      
      my $child_nodes_length = @$child_nodes;
      
      if ($child_nodes_length > 0) {
        
        $self->{first_child} = $child_nodes->[0];
        
        $self->{last_child} = $child_nodes->[$child_nodes_length - 1];
        
        for (my $i = 0; $i < $child_nodes_length; $i++) {
          my $child_node = $child_nodes->[$i];
          
          if ($i + 1 < $child_nodes_length) {
            my $sigling_node = $child_nodes->[$i + 1];
            $child_node->{next_sibling} = $sigling_node;
          }
          
          $child_node->{parent_node} = $self;
          weaken $child_node->{parent_node};
        }
      }
    }
  }
  
  method child_nodes : Eg::Node[] () {
    
    my $current_node = $self->{first_child};
    
    my $child_nodes_list = List->new(new Eg::Node[0]);
    
    while (1) {
      unless ($current_node) {
        last;
      }
      
      $child_nodes_list->push($current_node);
      $current_node = $current_node->{next_sibling};
    }
    
    my $child_nodes = (Eg::Node[])$child_nodes_list->to_array;
    
    return $child_nodes;
  }
  
  method node_value : string () {
    
    my $node_value_buffer = $self->{node_value_buffer};
    
    my $node_value = (string)undef;
    if ($node_value_buffer) {
      $node_value = $node_value_buffer->to_string;
    }
    
    return $node_value;
  }
  
  method get_root_node : Eg::Node () {
    
    my $current_node = $self;
    
    my $root_node = (Eg::Node)undef;
    
    while (1) {
      my $parent_node = $current_node->{parent_node};
      
      unless ($parent_node) {
        die "Cannot find the root node.";
      }
      
      if ($parent_node is_type Eg::Document) {
        $root_node = $current_node;
        last;
      }
      else {
        $current_node = $parent_node;
      }
    }
    
    return $root_node;
  }
  
  method node_name : string () {
    
    my $node_name = (string)undef;
    
    my $node_type = $self->{node_type};
    
    switch ($node_type) {
      case &TYPE_DOCUMENT_NODE : {
        $node_name = "#document";
      }
      case &TYPE_DOCUMENT_FRAGMENT_NODE : {
        $node_name = "#document-fragment";
      }
      case &TYPE_ELEMENT_NODE : {
        $node_name = Fn->uc($self->(Eg::Element)->tag_name);
      }
      case &TYPE_TEXT_NODE : {
        $node_name = "#text";
      }
      case &TYPE_COMMENT_NODE : {
        $node_name = "#comment";
      }
      default : {
        die "The node type $node_type is not supported.";
      }
    }
    
    return $node_name;
  }
}
