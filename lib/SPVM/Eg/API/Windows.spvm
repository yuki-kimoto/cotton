class Eg::API::Windows {
  interface Eg::API;
  
  use List;
  use Encode;
  use Eg::App;
  use Eg::Node;
  use Hash;
  
  use Eg::API::Windows::WindowHandle;
  use Eg::API::Windows::PaintInfo;
  
  has app : rw Eg::App;
  has runtime : rw Eg::Runtime;
  has window_handle : Eg::API::Windows::WindowHandle;
  
  static method new : Eg::API::Windows($options : object[] = undef) {
    
    my $self = new Eg::API::Windows;
    
    return $self;
  }
  
  native static method CW_USEDEFAULT : int ();
  
  method open_main_window : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $left = $options_h->get_or_default_int("left", &CW_USEDEFAULT);
    
    my $top = $options_h->get_or_default_int("top", &CW_USEDEFAULT);
    
    my $width = $options_h->get_or_default_int("width", &CW_USEDEFAULT);
    
    my $height = $options_h->get_or_default_int("height", &CW_USEDEFAULT);
    
    warn dump [$left, $top, $width, $height];
    
    $self->open_main_window_native($left, $top, $width, $height);
  }
  
  native method open_main_window_native : void ($left : int, $top : int, $width : int, $height : int);
  
  native method start_app : void ();
  
  native method get_viewport_width : int ();
  
  native method get_viewport_height : int ();
  
  native method paint_node : void ($paint_info : object, $node : Eg::Node);
  
  native method calc_text_height : int ($paint_info : Eg::API::Windows::PaintInfo, $text : string, $width : int, $font_styles : string[]);
  
  static method rgb : Eg::Style::Color ($red : float, $green : float, $blue : float) {
    my $color = Eg::Style::Color->new($red, $green, $blue, 1);
    return $color;
  }
  
  method repaint : void ($app : Eg::App, $paint_info : object) {
    
    my $runtime = $app->runtime;
    
    my $viewport_width = $runtime->api->get_viewport_width();
    my $viewport_height = $runtime->api->get_viewport_height();
    
    {
      my $body = (Eg::Node)$app->current_document->nodes->get(1);
      
      my $nodes = [$body, (Eg::Node)$body->nodes->get(0), $body->nodes->get(0)->(Eg::Node)->nodes->get(0)->(Eg::Node)];
      for (my $i = 0; $i < @$nodes; $i++) {
        my $node = $nodes->[$i];
        
        my $text_string = (string)undef;
        if ($node->text_buffer) {
          $text_string = $node->text_buffer->to_string;
        }
        
        my $draw_height = $runtime->api->calc_text_height($paint_info, $text_string, $viewport_width, undef);
        
        $node->set_css("left", "0px");
        $node->set_css("top", "0px");
        $node->set_css("width", "${viewport_width}px");
        $node->set_css("height", "${draw_height}px");
        
        $runtime->api->paint_node($paint_info, $node);
      }
    }
    
    {
      my $node_list = List->new([]);
      {
        my $node = Eg->div_({style => {left => "300px", top => "500px", width => "400px", height => "400px", "background-color" => "#FF0000"}});
        
        $node_list->push($node);
        
        $node->set_background_color(&rgb(1, 0, 0));
      }
      {
        my $node = Eg->div_({style => {left => "400px", top => "600px", width => "500px", height => "500px", "background-color" => "#FF0000"}});
        
        $node_list->push($node);
        $node->set_background_color(&rgb(1, 0, 0));
      }
      
      # Drow node
      my $node_list_length = $node_list->length;
      for (my $i = 0; $i < $node_list_length; $i++) {
        my $node = (Eg::Node)$node_list->get($i);
        $runtime->api->paint_node($paint_info, $node);
      }
    }
  }
}
