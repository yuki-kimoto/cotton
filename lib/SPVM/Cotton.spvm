class Cotton : precompile {
  use Cotton::Node;
  use List;
  use Cotton::Style::Color;
  use Encode;
  
  static method rgb : Cotton::Style::Color ($red : float, $green : float, $blue : float) {
    my $color = Cotton::Style::Color->new($red, $green, $blue, 1);
    return $color;
  }
  
  static method tag : Cotton::Node ($tag_name : string, $objects : Cotton::Node[]) {
    
    my $node = Cotton::Node->new;
    
    $node->{tag_name} = $tag_name;
    
    my $text_count = 0;
    
    my $child_nodes_list = List->new($objects);
    
    $node->{nodes} = $child_nodes_list;
    
    return $node;
  }
  
  static method body : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("body", $objects);
  }

  static method h1 : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("h1", $objects);
  }

  static method h2 : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("h2", $objects);
  }

  static method h3 : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("h3", $objects);
  }

  static method h4 : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("h4", $objects);
  }

  static method h5 : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("h5", $objects);
  }

  static method h6 : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("h6", $objects);
  }

  static method div : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("div", $objects);
  }
  
  static method span : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("span", $objects);
  }

  static method ul : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("ul", $objects);
  }

  static method ol : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("ol", $objects);
  }

  static method li : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("li", $objects);
  }
  static method a : Cotton::Node ($objects : Cotton::Node[]) {
    return &tag("a", $objects);
  }
  
  static method text : Cotton::Node ($text : string) {
    
    unless ($text) {
      die "\$text must be defined.";
    }
    
    my $new_node = Cotton::Node->new;
    
    $new_node->{type} = Cotton::Node->TYPE_TEXT_NODE;
    
    my $text_buffer = StringBuffer->new;
    
    $text_buffer->push($text);
    
    $new_node->{text} = $text_buffer;
    
    return $new_node;
  }
}
