class Eg::Node {
  allow Eg;
  
  use Hash;
  use List;
  use StringBuffer;
  use Eg::Attributes;
  use Eg::Style;
  
  enum {
    TYPE_ELEMENT_NODE = 1,
    TYPE_ATTRIBUTE_NODE = 2,
    TYPE_TEXT_NODE = 3,
    TYPE_CDATA_SECTION_NODE = 4,
    TYPE_PROCESSING_INSTRUCTION_NODE = 7,
    TYPE_COMMENT_NODE = 8,
    TYPE_DOCUMENT_NODE = 9,
    TYPE_DOCUMENT_TYPE_NODE = 10,
    TYPE_DOCUMENT_FRAGMENT_NODE = 11,
  }
  
  # Fields
  has type : ro int;
  
  has nodes : ro List of Eg::Node;
  
  has attributes : rw Eg::Attributes;
  
  has tag_name : ro string;
  
  has text_buffer : ro StringBuffer;
  
  has parent : Eg::Node;
  
  # Class Methods
  static method new : Eg::Node ($type : int, $nodes : Eg::Node[] = undef) {
    
    my $self = new Eg::Node;
    
    $self->{type} = $type;
    
    $self->{nodes} = List->new($nodes);
    
    if ($nodes) {
      for my $node (@$nodes) {
        $node->{parent} = $self;
        weaken $node->{parent};
      }
    }
    
    return $self;
  }
  
  static method new_element : Eg::Node ($tag_name : string, $attribute_pairs : object[] = undef, $nodes : Eg::Node[] = undef) {
    
    unless ($tag_name) {
      die "\$tag_namet must be defined.";
    }
    
    my $self = Eg::Node->new(Eg::Node->TYPE_ELEMENT_NODE, $nodes);
    
    $self->{tag_name} = $tag_name;
    
    my $attributes = Eg::Attributes->new($attribute_pairs);
    
    $self->{attributes} = $attributes;
    
    my $style_pairs = (object[])$attributes->attributes_h->delete("style");
    
    my $style = Eg::Style->new($style_pairs);
    
    $attributes->{style} = $style;
    
    return $self;
  }
  
  static method new_text : Eg::Node ($text : string) {
    
    unless ($text) {
      die "\$text must be defined.";
    }
    
    my $self = Eg::Node->new(Eg::Node->TYPE_TEXT_NODE);
    
    my $text_buffer = StringBuffer->new;
    
    $text_buffer->push($text);
    
    $self->{text_buffer} = $text_buffer;
    
    return $self;
  }
  
  # Instance Methods
  method style : Eg::Style () {
    
    return $self->{attributes}->{style};
  }
  
  method set_style : void ($style : Eg::Style) {
    $self->{attributes}->{style} = $style;
  }
  
  method css : string ($name : string) {
    
    return $self->{attributes}->{style}->{style_h}->get_string($name);
  }
  
  method set_css : void ($name : string, $value : string) {
    
    $self->{attributes}->{style}->{style_h}->set_string($name, $value);
  }
  
  method attr : string ($name : string) {
    
    return $self->{attributes}->{attributes_h}->get_string($name);
  }
  
  method set_attr : void ($name : string, $value : string) {
    
    $self->{attributes}->{attributes_h}->set_string($name, $value);
  }
  
  method text : string () {
    my $nodes = $self->{nodes};
    
    my $nodes_length = $nodes->length;
    
    my $text = (string)undef;
    
    if ($nodes_length > 0) {
      my $first_child = (Eg::Node)$nodes->get(0);
      
      if ($first_child->type == &TYPE_TEXT_NODE) {
        $text = $first_child->{text_buffer}->to_string;
      }
      else {
        die "The first child is not a text node.";
      }
    }
    else {
      return "";
    }
    
    return $text;
  }
  
  method set_text : string ($text : string) {
    my $nodes = $self->{nodes};
    
    my $nodes_length = $nodes->length;
    
    if ($nodes_length > 0) {
      my $first_child = (Eg::Node)$nodes->get(0);
      
      if ($first_child->type == &TYPE_TEXT_NODE) {
        $first_child->{text_buffer}->set($text);
      }
      else {
        die "The first child is not a text node.";
      }
    }
    else {
      $self->{nodes} = List->new([&new_text($text)]);
    }
    
  }
  
  # Deprecated allow
  allow Engine::App;
  
  # Deprecated Fields
  has color : rw Eg::Style::Color;
  
  has background_color : rw Eg::Style::Color;
  
  has draw_left : rw int;
  
  has draw_top : rw int;
  
  has draw_width : rw int;
  
  has draw_height : rw int;
  
}

