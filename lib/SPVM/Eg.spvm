class Eg : precompile {
  use Eg::Node;
  use List;
  use Eg::Style::Color;
  use Encode;
  
  static method text : Eg::Node ($text : string) {
    
    my $new_node = Eg::Node->new_text($text);
    
    return $new_node;
  }
  
  static method tag : Eg::Node ($tag_name : string, $nodes_or_text : object of Eg::Node[]|string = undef) {
    
    my $nodes = (Eg::Node[])undef;
    if ($nodes_or_text) {
      if ($nodes_or_text is_type string) {
        $nodes = [Eg::Node->new_text((string)$nodes_or_text)];
      }
      elsif ($nodes_or_text is_type Eg::Node[]) {
        $nodes = (Eg::Node[])$nodes_or_text;
      }
      else {
        die "The type of \$nodes_or_text must be Eg::Node or string.";
      }
    }
    
    my $new_element_node = Eg::Node->new_element($tag_name, undef, $nodes);
    
    return $new_element_node;
  }
  
  static method body : Eg::Node ($nodes : Eg::Node[] = undef) {
    return &tag("body", $nodes);
  }
  
  static method div : Eg::Node ($nodes : Eg::Node[] = undef) {
    return &tag("div", $nodes);
  }
  
  static method ul : Eg::Node ($nodes : Eg::Node[] = undef) {
    return &tag("ul", $nodes);
  }
  
  static method li : Eg::Node ($nodes : Eg::Node[] = undef) {
    return &tag("li", $nodes);
  }
  static method a : Eg::Node ($nodes : Eg::Node[] = undef) {
    return &tag("a", $nodes);
  }
  
  static method tag_ : Eg::Node ($tag_name : string, $attributes : object[] = undef, $nodes_or_text : object of Eg::Node[]|string = undef) {
    
    my $nodes = (Eg::Node[])undef;
    if ($nodes_or_text) {
      if ($nodes_or_text is_type string) {
        $nodes = [Eg::Node->new_text((string)$nodes_or_text)];
      }
      elsif ($nodes_or_text is_type Eg::Node[]) {
        $nodes = (Eg::Node[])$nodes_or_text;
      }
      else {
        die "The type of \$nodes_or_text must be Eg::Node or string.";
      }
    }
    
    my $new_element_node = Eg::Node->new_element($tag_name, $attributes, $nodes);
    
    return $new_element_node;
  }
  
  static method body_ : Eg::Node ($attributes : object[] = undef, $nodes : Eg::Node[] = undef) {
    return &tag_("body",$attributes, $nodes);
  }
  
  static method div_ : Eg::Node ($attributes : object[] = undef, $nodes : Eg::Node[] = undef) {
    return &tag_("div",$attributes, $nodes);
  }
  
  static method ul_ : Eg::Node ($attributes : object[] = undef, $nodes : Eg::Node[] = undef) {
    return &tag_("ul",$attributes, $nodes);
  }
  
  static method li_ : Eg::Node ($attributes : object[] = undef, $nodes : Eg::Node[] = undef) {
    return &tag_("li",$attributes, $nodes);
  }
  static method a_ : Eg::Node ($attributes : object[] = undef, $nodes : Eg::Node[] = undef) {
    return &tag_("a",$attributes, $nodes);
  }
  
  # Deprecated Methods
  static method rgb : Eg::Style::Color ($red : float, $green : float, $blue : float) {
    my $color = Eg::Style::Color->new($red, $green, $blue, 1);
    return $color;
  }
  
}
