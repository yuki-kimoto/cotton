package Cotton : precompile {
  use Cotton::Node;
  use Cotton::Style;
  use Cotton::Id;
  use Cotton::Classes;
  use SPVM::List;
  
  sub new_tag : Cotton::Node ($tag : string, $objects : object[] ...) {
    
    my $node = new Cotton::Node;
    
    my $style_count = 0;
    my $id_count = 0;
    my $classes_count = 0;
    my $text_count = 0;
    
    my $child_node_list = SPVM::List->new([]);
    
    my $objects_length = @$objects;
    for (my $i = 0; $i < $objects_length; $i++) {
      my $object = $objects->[$i];
      
      if ($object isa string) {
        if ($text_count > 0) {
          die "Specify only one text";
        }
        
        $node->{text} = (string)$object;
        
        $text_count++;
      }
      elsif ($object isa Cotton::Style) {
        if ($style_count > 0) {
          die "Specify only one style";
        }
        
        my $style = (Cotton::Style)$object;
        
        $node->{style} = $style->{value};
        
        $style_count++;
      }
      elsif ($object isa Cotton::Id) {
        if ($id_count > 0) {
          die "Specify only one class";
        }
        
        my $id = (Cotton::Id)$object;
        $node->{id} = $id->{value};
        
        $id_count++;
      }
      elsif ($object isa Cotton::Classes) {
        if ($id_count > 0) {
          die "Specify only one id";
        }
        
        my $classes = (Cotton::Classes)$object;
        $node->{classes} = $classes->{value};
      
        $classes_count++;
      }
      elsif ($object isa Cotton::Node) {
        $child_node_list->push((Cotton::Node)$object);
      }
      else {
        die "Invalid argument";
      }
    }
    
    my $child_node_list_length = $child_node_list->length;
    for (my $i = 0; $i < $child_node_list_length; $i++) {
      my $child_node = (Cotton::Node)$child_node_list->get($i);
      
      if ($i == 0) {
        $node->{first} = $child_node;
        $child_node->{moresib} = 1;
      }
      
      if ($i < $child_node_list_length - 1) {
        my $next_child_node = (Cotton::Node)$child_node_list->get($i + 1);
        $child_node->{sibparent} = $next_child_node;
        $child_node->{moresib} = 1;
      }
      elsif ($i == $child_node_list_length - 1) {
        $child_node->{sibparent} = $node;
        $node->{last} = $child_node;
      }
    }
    
    return $node;
  }
  
  sub body : Cotton::Node ($objects : object[] ...) {
    return new_tag("body", $objects);
  }

  sub h1 : Cotton::Node ($objects : object[] ...) {
    return new_tag("h1", $objects);
  }

  sub h2 : Cotton::Node ($objects : object[] ...) {
    return new_tag("h2", $objects);
  }

  sub h3 : Cotton::Node ($objects : object[] ...) {
    return new_tag("h3", $objects);
  }

  sub h4 : Cotton::Node ($objects : object[] ...) {
    return new_tag("h4", $objects);
  }

  sub h5 : Cotton::Node ($objects : object[] ...) {
    return new_tag("h5", $objects);
  }

  sub h6 : Cotton::Node ($objects : object[] ...) {
    return new_tag("h6", $objects);
  }

  sub div : Cotton::Node ($objects : object[] ...) {
    return new_tag("div", $objects);
  }
  
  sub span : Cotton::Node ($objects : object[] ...) {
    return new_tag("span", $objects);
  }

  sub ul : Cotton::Node ($objects : object[] ...) {
    return new_tag("ul", $objects);
  }

  sub ol : Cotton::Node ($objects : object[] ...) {
    return new_tag("ol", $objects);
  }

  sub li : Cotton::Node ($objects : object[] ...) {
    return new_tag("li", $objects);
  }
  sub a : Cotton::Node ($objects : object[] ...) {
    return new_tag("a", $objects);
  }

  sub id : Cotton::Id ($id_value : string) {
    my $id = new Cotton::Id;
    
    $id->{value} = $id_value;
    
    return $id;
  }
  
  sub class : Cotton::Classes ($class_values : string[] ...) {
    
    my $classes = new Cotton::Classes;
    $classes->{value} = $class_values;
    
    return $classes;
  }

  sub style : Cotton::Style ($style_value : SPVM::Hash) {
    my $style = new Cotton::Style;
    $style->{value} = $style_value;
    
    return $style;
  }
}
