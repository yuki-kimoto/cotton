class Cotton {
  use Eg;
  use Eg::Runtime;
  use Eg::OS;
  use Sys::OS;
  use Eg::CSS::Box;
  use Eg::DOMImplementation;
  
  static method tag : Eg::Element ($tag_name : string, $child_nodes_or_text : object of Eg::Node[]|string = undef) {
    
    my $child_nodes = (Eg::Node[])undef;
    if ($child_nodes_or_text) {
      if ($child_nodes_or_text is_type string) {
        $child_nodes = [Eg::Text->new((string)$child_nodes_or_text)];
      }
      elsif ($child_nodes_or_text isa Eg::Node[]) {
        $child_nodes = (Eg::Node[])$child_nodes_or_text;
      }
      else {
        die "The type of \$child_nodes_or_text must inherit Eg::Element or must be string.";
      }
    }
    
    my $new_element_node = Eg::Element->new($tag_name, undef, $child_nodes);
    
    return $new_element_node;
  }
  
  static method tag_ : Eg::Element ($tag_name : string, $attributes : object[] = undef, $child_nodes_or_text : object of Eg::Node[]|string = undef) {    
    my $child_nodes = (Eg::Node[])undef;
    if ($child_nodes_or_text) {
      if ($child_nodes_or_text is_type string) {
        $child_nodes = [Eg::Text->new((string)$child_nodes_or_text)];
      }
      elsif ($child_nodes_or_text isa Eg::Node[]) {
        $child_nodes = (Eg::Node[])$child_nodes_or_text;
      }
      else {
        die "The type of \$child_nodes_or_text must inherit Eg::Node or must be string.";
      }
    }
    
    my $new_element_node = Eg::Element->new($tag_name, $attributes, $child_nodes);
    
    return $new_element_node;
  }
  
  # Class Methods
  static method main : int ($start_file : string, $args : string[]) {
    my $runtime = Eg::Runtime->new;
    
    my $os = (Eg::OS)undef;
    
    if (Sys::OS->is_windows) {
      if (require Eg::OS::Windows) {
        $os = Eg::OS::Windows->new;
      }
    }
    
    unless ($os) {
      die "This system is not supported.";
    }
    
    $os->build_runtime($runtime);
    
    Eg->SET_RUNTIME($runtime);
    
    my $document = &document;
    
    my $window = $runtime->window;
    
    $window->set_document($document);
    
    my $api = $runtime->api;
    
    $api->app->open_main_window;
    
    warn $api->window->inner_width;
    
    warn Eg->window->inner_width;
    
    warn $api->window->inner_height;
    
    warn Eg->window->inner_height;
    
    warn $api->window->outer_width;
    
    warn Eg->window->outer_width;
    
    warn $api->window->outer_height;
    
    warn Eg->window->outer_height;
    
    $api->app->start_event_loop;
  }
  
  static method document : Eg::Document () {
    
    my $div1 = &tag_("div",
      {style => {"background-color" => "#00FF00", "color" => "#0000FF", "font-size" => "60px", "font-weight" => "bold"}},
      "あああああ"
    );
    
    my $elements = [
      $div1,
      &tag_("div",{style => {left => "300px", top => "400px", width => "100px", height => "100px", "background-color" => "#FF0000"}}),
      &tag_("div",{style => {left => "400px", top => "500px", width => "100px", height => "100px", "background-color" => "#FF0000"}}),
      &tag_("div",{style => {left => "100px", top => "100px", width => "100px", height => "100px", "background-color" => "#FFFF00"}}),
      &tag_("div",{style => {left => "200px", top => "200px", width => "100px", height => "100px", "background-color" => "#FFFF00"}}),
    ];
    
    my $title = "コットン";
    
    my $dom_impl = Eg::DOMImplementation->new;
    
    my $document = $dom_impl->create_html_document($title);
    
    for my $element (@$elements) {
      $document->body->append_child($element);
    }
    
    $document->set_title($title);
    
    return $document;
  }
  
}
