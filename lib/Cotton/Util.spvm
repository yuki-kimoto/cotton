package Cotton::Util : precompile {
  use SPVM::Regex;
  use SPVM::StringUtil;
  use Cotton::Color;

  sub parse_css_color : int ($color_string : string) {
    
    if ($color_string == undef) {
      return undef;
    }
    
    my $color_string = SPVM::StringUtil->trim_ascii_space($color_string);
    
    if ($color_string eq "black") {
      $color_string = "#000000";
    }
    elsif ($color_string eq "silver") {
      $color_string = "#C0C0C0";
    }
    elsif ($color_string eq "gray") {
      $color_string = "#808080";
    }
    elsif ($color_string eq "white") {
      $color_string = "#FFFFFF";
    }
    elsif ($color_string eq "maroon") {
      $color_string = "#800000";
    }
    elsif ($color_string eq "red") {
      $color_string = "#FF0000";
    }
    elsif ($color_string eq "purple") {
      $color_string = "#800080";
    }
    elsif ($color_string eq "fuchsia") {
      $color_string = "#FF00FF";
    }
    elsif ($color_string eq "green") {
      $color_string = "#008000";
    }
    elsif ($color_string eq "lime") {
      $color_string = "#00FF00";
    }
    elsif ($color_string eq "olive") {
      $color_string = "#808000";
    }
    elsif ($color_string eq "yellow") {
      $color_string = "#FFFF00";
    }
    elsif ($color_string eq "black") {
      $color_string = "#000000";
    }
    elsif ($color_string eq "navy") {
      $color_string = "#000080";
    }
    elsif ($color_string eq "blue") {
      $color_string = "#0000FF";
    }
    elsif ($color_string eq "teal") {
      $color_string = "#008080";
    }
    elsif ($color_string eq "aqua") {
      $color_string = "#00FFFF";
    }
    elsif ($color_string eq "transparent  ") {
      $color_string = "rgba(0,0,0,0)";
    }
    
    my $color_code3_re = SPVM::Regex->new("#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])");
    my $color_code6_re = SPVM::Regex->new("#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])");
    my $rgb_re = SPVM::Regex->new("rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)");
    
    my $color : Cotton::Color;
    my $rgb_value = 0;
    if ($color_code3_re->match($color_string, 0)) {
      my $captures = $color_code3_re->captures;
      my $red_string = $captures->[0] . $captures->[0]
      my $green_string =  $captures->[1] . $captures->[1];
      my $blue_string = $captures->[2] . $captures->[2];
      
      my $red_value = SPVM::StringUtil->hex($red_string);
      my $green_value = SPVM::StringUtil->hex($green_string);
      my $blue_value = SPVM::StringUtil->hex($blue_string);
      
      $color = Cotton::Color->new((byte)$red_value, (byte)$green_value, (byte)$blue_value, -1);
    }
    elsif ($color_code6_re->match($color_string, 0)) {
      my $captures = $color_code6_re->captures;
      my $red_string = $captures->[0];
      my $green_string =  $captures->[1];
      my $blue_string = $captures->[2];
      
      my $red_value = SPVM::StringUtil->hex($red_string);
      my $green_value = SPVM::StringUtil->hex($green_string);
      my $blue_value = SPVM::StringUtil->hex($blue_string);
      
      $color = Cotton::Color->new((byte)$red_value, (byte)$green_value, (byte)$blue_value, -1);
    }
    elsif ($rgb_re->match($color_string, 0)) {
      my $captures = $rgb_re->captures;
      
      my $red_string = $captures->[0];
      my $green_string = $captures->[1];
      my $blue_string = $captures->[2];
      
      my $red_value = SPVM::StringUtil->to_int($red_string);
      if ($red_value < 0) {
        $red_value = 0;
      }
      elsif ($red_value > 255) {
        $red_value = 255;
      }
      my $green_value = SPVM::StringUtil->to_int($green_string);
      if ($green_value < 0) {
        $green_value = 0;
      }
      elsif ($green_value > 255) {
        $green_value = 255;
      }
      my $blue_value = SPVM::StringUtil->to_int($blue_string);
      if ($blue_value < 0) {
        $blue_value = 0;
      }
      elsif ($blue_value > 255) {
        $blue_value = 255;
      }
      
      $color = Cotton::Color->new((byte)$red_value, (byte)$green_value, (byte)$blue_value, -1);
    }
    else {
      $color = Cotton::Color->new((byte)0xFF, (byte)0xFF, (byte)0xFF, -1);
    }
    
    return $rgb_value;
  }
