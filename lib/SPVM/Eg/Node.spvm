# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Eg::Node {
  allow Eg;
  
  use Hash;
  use List;
  use StringBuffer;
  use Eg::Text;
  
  enum {
    TYPE_ELEMENT_NODE = 1,
    TYPE_ATTRIBUTE_NODE = 2,
    TYPE_TEXT_NODE = 3,
    TYPE_CDATA_SECTION_NODE = 4,
    TYPE_PROCESSING_INSTRUCTION_NODE = 7,
    TYPE_COMMENT_NODE = 8,
    TYPE_DOCUMENT_NODE = 9,
    TYPE_DOCUMENT_TYPE_NODE = 10,
    TYPE_DOCUMENT_FRAGMENT_NODE = 11,
  }
  
  # Fields
  has type : ro int;
  
  has child_nodes_list : ro List of Eg::Node;
  
  has parent : ro Eg::Node;
  
  # Class Methods
  static method new : Eg::Node ($type : int, $child_nodes : Eg::Node[] = undef) {
    
    my $self = new Eg::Node;
    
    $self->init($type, $child_nodes);
    
    return $self;
  }
  
  private static method copy_object_with_proto : object[] ($array : object[], $proto : object[], $cloner : Cloner = undef, $offset : int = 0, $length : int = -1) {
    
    unless ($array) {
      die "\$array must be defined.";
    }
    
    unless ($offset >= 0) {
      die "\$offset must be greater than or equal to 0.";
    }
    
    my $array_length = @$array;
    if ($length < 0) {
      $length = $array_length - $offset;
    }
    
    unless ($offset + $length <= $array_length) {
      die "\$offset + \$length must be less than or equal to the length of \$array.";
    }
    
    unless ($proto) {
      $proto = $array;
    }
    
    my $new_array = Array->new_proto($proto, $length);
    
    if ($cloner) {
      for (my $i = 0; $i < $length; $i++) {
        $new_array->[$i] = $cloner->($array->[$offset + $i]);
      }
    }
    else {
      Array->memcpy_object_address($new_array, 0, $array, $offset, $length);
    }
    
    return $new_array;
  }
  
  private static method copy_object_address_with_proto : object[] ($array : object[], $proto : object[], $offset : int = 0, $length : int = -1) {
    return &copy_object_with_proto($array, $proto, undef, $offset, $length);
  }
  
  # Instance Methods
  protected method init : void ($type : int, $child_nodes : Eg::Node[] = undef) {
    
    $self->{type} = $type;
    
    if ($child_nodes) {
      unless ($child_nodes is_type Eg::Node[]) {
        $child_nodes = (Eg::Node[])&copy_object_address_with_proto($child_nodes, new Eg::Node[0]);
      }
    }
    else {
      $child_nodes = new Eg::Node[0];
    }
    
    $self->{child_nodes_list} = List->new($child_nodes);
    
    if ($child_nodes) {
      for my $node (@$child_nodes) {
        $node->{parent} = $self;
        weaken $node->{parent};
      }
    }
    
  }
  
  method children : Eg::Node[] () {
    my $child_nodes_list = $self->{child_nodes_list};
    
    my $child_nodes = (Eg::Node[])undef;
    if ($child_nodes_list) {
      $child_nodes = (Eg::Node[])$child_nodes_list->to_array;
    }
    else {
      $child_nodes = new Eg::Node[0];
    }
    
    return $child_nodes;
  }
  
  method append : void ($node : Eg::Node) {
    
    unless ($node) {
      die "\$node must be defined.";
    }
    
    my $child_nodes_list = $self->{child_nodes_list};
    
    $child_nodes_list->push($node);
  }
  
  method prepend : void ($node : Eg::Node) {
    
    unless ($node) {
      die "\$node must be defined.";
    }
    
    my $child_nodes_list = $self->{child_nodes_list};
    
    $child_nodes_list->unshift($node);
  }
  
  method after : void ($node : Eg::Node) {
    
    unless ($node) {
      die "\$node must be defined.";
    }
    
    my $parent = $self->{parent};
    
    unless ($node) {
      die "The parent of \$node must be defined.";
    }
    
    my $sibling_nodes_list = $parent->{child_nodes_list};
    
    my $sibling_nodes_length = $sibling_nodes_list->length;
    
    for (my $i = 0; $i < $sibling_nodes_length; $i++) {
      my $sibling = $sibling_nodes_list->get($i);
      
      if ($sibling == $self) {
        $sibling_nodes_list->insert($i + 1, $node);
        last;
      }
    }
  }
  
  method before : void ($node : Eg::Node) {
    
    unless ($node) {
      die "\$node must be defined.";
    }
    
    my $parent = $self->{parent};
    
    unless ($node) {
      die "The parent of \$node must be defined.";
    }
    
    my $sibling_nodes_list = $parent->{child_nodes_list};
    
    my $sibling_nodes_length = $sibling_nodes_list->length;
    
    for (my $i = 0; $i < $sibling_nodes_length; $i++) {
      my $sibling = $sibling_nodes_list->get($i);
      
      if ($sibling == $self) {
        $sibling_nodes_list->insert($i, $node);
        last;
      }
    }
  }
  
  method get_text_for_css_box : string () {
    my $child_nodes = $self->{child_nodes_list};
    
    my $child_nodes_length = $child_nodes->length;
    
    my $text = (string)undef;
    
    if ($child_nodes_length == 0) {
      # Do nothing
    }
    elsif ($child_nodes_length == 1) {
      my $first_child = (Eg::Node)$child_nodes->get(0);
      
      if ($first_child->type == &TYPE_TEXT_NODE) {
        $text = $first_child->(Eg::Text)->value_buffer->to_string;
      }
      else {
        # Do nothing
      }
    }
    else {
      # Do nothing
    }
    
    return $text;
  }
}
