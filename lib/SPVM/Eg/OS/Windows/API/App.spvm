class Eg::OS::Windows::API::App extends Eg::OS::API {
  
  use List;
  use Encode;
  use Eg::Window;
  use Eg::Node;
  use Hash;
  
  use Eg::CSS::Box;
  use Eg::CSS::BoxBuilder;
  
  use Eg::OS::Windows::HWND;
  use Eg::OS::Windows::ID2D1HwndRenderTarget;
  
  static method new : Eg::OS::Windows::API::App($runtime : Eg::Runtime) {
    
    my $self = new Eg::OS::Windows::API::App;
    
    $self->{runtime} = $runtime;
    
    return $self;
  }
  
  method open_main_window : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $left = $options_h->get_or_default_int("left", &CW_USEDEFAULT);
    
    my $top = $options_h->get_or_default_int("top", &CW_USEDEFAULT);
    
    my $width = $options_h->get_or_default_int("width", &CW_USEDEFAULT);
    
    my $height = $options_h->get_or_default_int("height", &CW_USEDEFAULT);
    
    $self->open_main_window_native($left, $top, $width, $height);
  }
  
  native method open_main_window_native : void ($left : int, $top : int, $width : int, $height : int);
  
  native method start_event_loop : void ();
  
  native method paint_node : void ($node : Eg::Node);
  
  method reflow : void () {
    $self->Eg::API::App::reflow;
  }
  
  method repaint : void () {
    $self->Eg::API::App::repaint;
  }
  
  private native static method CW_USEDEFAULT : int ();
  
  private native method text_metrics_height : int ($text_node : Eg::Text);
  
  private method document_title : string () {
    return $self->{runtime}->window->document->title;
  }
}
