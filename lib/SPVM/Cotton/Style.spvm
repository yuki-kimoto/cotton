class Cotton::Style {
  allow Cotton;
  
  use Cotton::Style::Color;
  use Regex;
  use Fn;
  
  # Fields
  has styles_h : ro Hash of string;
  
  # Class Methods
  static method new : Cotton::Style ($style_pairs : object[] = undef) {
    
    my $self = new Cotton::Style;
    
    $self->{styles_h} = Hash->new($style_pairs);
    
    return $self;
  }
  
  # Instance Methods
  method parse_color : Cotton::Style::Color () {
    
    my $styles_h = $self->{styles_h};
    
    my $color_string = $styles_h->get_string("color");
    
    unless ($color_string) {
      return undef;
    }
    
    my $color = (Cotton::Style::Color)undef;
    if (my $match = Regex->new("^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$")->match($color_string)) {
      my $red_string = $match->cap1;
      
      my $green_string = $match->cap2;
      
      my $blue_string = $match->cap3;
      
      my $red = Fn->to_int($red_string);
      
      my $green = Fn->to_int($green_string);
      
      my $blue = Fn->to_int($blue_string);
      
      $color = Cotton::Style::Color->new($red, $green, $blue);
    }
    else {
      return undef;
    }
    
    return $color;
  }
}
