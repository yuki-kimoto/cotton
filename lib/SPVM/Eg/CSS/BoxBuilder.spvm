class Eg::CSS::BoxBuilder {
  
  use List;
  use Encode;
  use Eg::Window;
  use Eg::Node;
  use Hash;
  
  use Eg::CSS::Box;
  
  has runtime : Eg::Runtime;
  
  static method new : Eg::CSS::BoxBuilder($runtime : Eg::Runtime) {
    
    my $self = new Eg::CSS::BoxBuilder;
    
    $self->{runtime} = $runtime;
    
    return $self;
  }
  
  method build : void () {
    
    my $runtime = $self->{runtime};
    
    my $window = $runtime->window;
    
    my $document = $window->document;
    
    my $head = $document->head;
    
    my $body = $document->body;
    
    my $node_root = (Eg::Node)$document;
    my $node_cur = $node_root;
    my $finish = 0;
    while ($node_cur) {
      
      if ($node_cur == $head) {
        $node_cur = $body;
      }
      
      # [START]Preorder traversal position
      if ($node_cur is_type Eg::Element) {
       $node_cur->(Eg::Element)->set_merged_styles_h($node_cur->(Eg::Element)->styles_h);
       $self->build_box_styles($node_cur);
      }
      
      $self->build_box_set_default_values($node_cur);
      
      $self->build_box_descendant($node_cur);
      
      if ($node_cur->first_child) {
        $node_cur = (Eg::Node)$node_cur->first_child;
      }
      else {
        while (1) {
          # [START]Postorder traversal position
          $self->build_box_ascendant($node_cur);
          
          if ($node_cur == $node_root) {
            
            $finish = 1;
            
            last;
          }
          
          # Next sibling
          if ($node_cur->next_sibling) {
            $node_cur = $node_cur->next_sibling;
            last;
          }
          # Next is parent
          else {
            $node_cur = $node_cur->parent_node;
          }
        }
        if ($finish) {
          last;
        }
      }
    }
  }
  
  private native method build_box_styles : void ($node : Eg::Node);
  
  private native method build_box_set_default_values : void ($node : Eg::Node);
  
  private native method build_box_descendant : void ($node : Eg::Node);
  
  private native method build_box_ascendant : void ($node : Eg::Node);
  
  private method text_metrics_height : int ($text_node : Eg::Text) {
    return $self->{runtime}->api->app->text_metrics_height($text_node);
  }
  
  private method inner_width : int () {
    return $self->{runtime}->api->window->inner_width;
  }
}
